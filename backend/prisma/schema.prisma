generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  walletAddress String        @unique
  email         String?       @unique
  name          String?
  company       String?
  role          Role          @default(OPERATOR)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  certificates  Certificate[]
  drafts        Draft[]
  profile       Profile?
  submissions   Submission[]
  validations   PersonaValidation[]

  @@index([walletAddress], map: "idx_users_wallet_address")
  @@index([email], map: "idx_users_email")
  @@map("users")
}

model PersonaValidation {
  id          String   @id @default(cuid())
  inquiryId   String   @unique
  referenceId String   // This is the user ID
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [referenceId], references: [id], onDelete: Cascade)

  @@index([referenceId], map: "idx_persona_validation_reference_id")
  @@map("persona_validation")
}

model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique
  name          String
  company       String?
  email         String
  walletAddress String   @unique
  profileImage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Submission {
  id                String           @id @default(cuid())
  deviceName        String
  deviceType        String
  serialNumber      String
  manufacturer      String
  model             String
  yearOfManufacture String
  condition         String
  specifications    String
  purchasePrice     String
  currentValue      String
  expectedRevenue   String
  operationalCosts  String
  status            SubmissionStatus @default(PENDING)
  submittedAt       DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  userId            String
  location          String
  adminReview       AdminReview?
  certificate       Certificate?
  files             SubmissionFile[]
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_submissions_user_id")
  @@index([status], map: "idx_submissions_status")
  @@index([submittedAt], map: "idx_submissions_submitted_at")
  @@map("submissions")
}

model Draft {
  id                String      @id @default(cuid())
  deviceName        String      @default("")
  deviceType        String      @default("")
  serialNumber      String      @default("")
  manufacturer      String      @default("")
  model             String      @default("")
  yearOfManufacture String      @default("")
  condition         String      @default("")
  specifications    String      @default("")
  purchasePrice     String      @default("")
  currentValue      String      @default("")
  expectedRevenue   String      @default("")
  operationalCosts  String      @default("")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  userId            String
  location          String      @default("")
  files             DraftFile[]
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_drafts_user_id")
  @@index([updatedAt], map: "idx_drafts_updated_at")
  @@map("drafts")
}

model SubmissionFile {
  id           String     @id @default(cuid())
  filename     String
  path         String
  size         Int
  mimeType     String
  documentType String
  uploadedAt   DateTime   @default(now())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("submission_files")
}

model DraftFile {
  id           String   @id @default(cuid())
  filename     String
  path         String
  size         Int
  mimeType     String
  documentType String
  uploadedAt   DateTime @default(now())
  draftId      String
  draft        Draft    @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@map("draft_files")
}

model File {
  id        String   @id @default(uuid())
  filename  String
  mimetype  String
  path      String   // File path on disk
  hash      String   // SHA256 hash of the file
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminReview {
  id                 String         @id @default(cuid())
  notes              String?
  technicalScore     Int?
  regulatoryScore    Int?
  financialScore     Int?
  environmentalScore Int?
  overallScore       Int?
  decision           AdminDecision?
  decisionAt         DateTime?
  reviewedAt         DateTime       @default(now())
  submissionId       String         @unique
  submission         Submission     @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("admin_reviews")
}

model Certificate {
  id              String            @id @default(cuid())
  certificateHash String            @unique
  stellarTxHash   String?
  issuedAt        DateTime          @default(now())
  expiresAt       DateTime?
  status          CertificateStatus @default(ACTIVE)
  submissionId    String            @unique
  userId          String
  submission      Submission        @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([certificateHash], map: "idx_certificates_hash")
  @@index([stellarTxHash], map: "idx_certificates_stellar_tx")
  @@map("certificates")
}

model AuthChallenge {
  id            String   @id @default(cuid())
  challenge     String   @unique
  walletAddress String
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  @@index([challenge], map: "idx_auth_challenges_challenge")
  @@index([expiresAt], map: "idx_auth_challenges_expires_at")
  @@map("auth_challenges")
}

model AuthSession {
  id            String   @id @default(cuid())
  token         String   @unique
  walletAddress String
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  @@index([token], map: "idx_auth_sessions_token")
  @@index([expiresAt], map: "idx_auth_sessions_expires_at")
  @@map("auth_sessions")
}

model DeploymentLog {
  id          String   @id
  version     String
  environment String
  deployedAt  DateTime @default(now())
  commitHash  String?
  branch      String?
  notes       String?
  metadata    Json?

  @@index([environment], map: "idx_deployment_logs_environment")
  @@index([deployedAt(sort: Desc)], map: "idx_deployment_logs_deployed_at")
  @@index([version], map: "idx_deployment_logs_version")
  @@map("deployment_logs")
}

enum Role {
  OPERATOR
  ADMIN
  VALIDATOR
}

enum SubmissionStatus {
  DRAFT
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum AdminDecision {
  APPROVED
  REJECTED
}

enum CertificateStatus {
  ACTIVE
  EXPIRED
  REVOKED
}
